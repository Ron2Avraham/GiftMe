rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isPartner(userId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.partnerId == userId;
    }

    // Users collection rules
    match /users/{userId} {
      // Allow users to read any user profile (needed for connection process)
      allow read: if isAuthenticated();
      // Allow users to write their own profile and create new user profiles
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && isOwner(userId);
      
      // Wishlist subcollection rules
      match /wishlist/{itemId} {
        // Allow users to read their own wishlist and their partner's wishlist
        allow read: if isAuthenticated() && (isOwner(userId) || isPartner(userId));
        // Allow users to write only their own wishlist
        allow write: if isAuthenticated() && isOwner(userId);
      }

      // Calendar subcollection rules
      match /calendar/{eventId} {
        // Allow users to read their own calendar and their partner's calendar
        allow read: if isAuthenticated() && (isOwner(userId) || isPartner(userId));
        // Allow users to write only their own calendar
        allow write: if isAuthenticated() && isOwner(userId);
      }
    }

    // Connections collection rules
    match /connections/{connectionId} {
      // Allow users to read any connections (needed for connection process)
      allow read: if isAuthenticated();
      // Allow users to create and update connections
      allow create, update: if isAuthenticated();
      // Allow users to delete only their own connections
      allow delete: if isAuthenticated() && 
        (connectionId.matches(request.auth.uid + '_.*') || 
         connectionId.matches('.*_' + request.auth.uid));
    }
  }
} 